<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
    xmlns:themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
    xmlns:fw="clr-namespace:SourceChord.FluentWPF;assembly=FluentWPF"
    xmlns:mcart="clr-namespace:TheXDS.MCART.Controls;assembly=MCART.WPF"
    xmlns:types="clr-namespace:TheXDS.MCART.Types;assembly=MCART"
    xmlns:widgets="clr-namespace:TheXDS.Proteus.Widgets"
    xmlns:xcwtp="clr-namespace:Xceed.Wpf.Toolkit.Primitives;assembly=Xceed.Wpf.Toolkit"
    xmlns:themes1="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=Xceed.Wpf.Toolkit"
    xmlns:xcwt="clr-namespace:Xceed.Wpf.Toolkit;assembly=Xceed.Wpf.Toolkit">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/FluentWPF;component/Styles/Controls.xaml" />
        <ResourceDictionary Source="Colors.xaml"/>
        <ResourceDictionary Source="ValueConverters.xaml"/>
        <ResourceDictionary Source="Effects.xaml"/>
        <ResourceDictionary Source="Misc.xaml"/>
        <ResourceDictionary Source="Styles/Containers.xaml"/>
        <ResourceDictionary Source="Styles/Lists.xaml"/>
        <ResourceDictionary Source="Styles/Basic.xaml"/>
        <ResourceDictionary Source="Styles/Controls.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!-- Estilos base -->
    <Style x:Key="EntryBase">
        <Setter Property="Control.Foreground" Value="{DynamicResource SystemBaseMediumHighColorBrush}" />
        <Setter Property="Control.Background" Value="{DynamicResource SystemAltHighColorBrush}" />
        <Setter Property="Control.BorderBrush" Value="DarkGray"/>
        <Setter Property="ContentControl.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <Grid x:Name="root">
                        <Border
                            x:Name="border"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            Opacity="0.5"/>
                        <DockPanel VerticalAlignment="{TemplateBinding VerticalContentAlignment}" MinHeight="24">
                            <TextBlock
                                x:Name="symbol"
                                Margin="5,0,0,0"
                                Text="{TemplateBinding widgets:ProteusProp.Icon}"
                                TextAlignment="Center"
                                VerticalAlignment="Center"
                                Foreground="Gray" />
                            <TextBlock
                                x:Name="watermark"
                                VerticalAlignment="Center"
                                Margin="5,0"
                                HorizontalAlignment="Left"
                                IsHitTestVisible="False"
                                Visibility="Collapsed"
                                Text="{TemplateBinding widgets:ProteusProp.Watermark}"
                                Foreground="DarkGray"
                                FontStyle="Italic" />
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                Focusable="False"
                                Foreground="Gray"
                                VerticalAlignment="Center"
                                HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility="Hidden" />
                        </DockPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TextBox.Text" Value="">
                            <Setter Property="Visibility" TargetName="watermark" Value="Visible" />
                        </Trigger>
                        <Trigger Property="widgets:ProteusProp.WatermarkAlwaysVisible" Value="True">
                            <Setter Property="Visibility" TargetName="watermark" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Text" TargetName="symbol" Value="🛇" />
                            <Setter Property="Opacity" TargetName="root" Value="0.5" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" TargetName="symbol"
                                    Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Foreground" TargetName="symbol" Value="{DynamicResource CorpColor}" />
                            <Setter Property="Visibility" TargetName="watermark" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="widgets:ProteusProp.Warned" Value="True">
                            <Setter Property="Foreground" TargetName="symbol" Value="DarkRed" />
                            <Setter Property="Background" TargetName="border" Value="{StaticResource BadColor}" />
                        </Trigger>
                        <Trigger Property="TextBoxBase.IsReadOnly" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{x:Null}" />
                            <Setter Property="Background" TargetName="border" Value="{x:Null}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="widgets:ProteusProp.Warned" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" TargetName="symbol" Value="Red" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="widgets:ProteusProp.Warned" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" TargetName="symbol" Value="Red" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="UpDownBase" TargetType="{x:Type xcwtp:InputBase}">
        <Setter Property="Control.Foreground" Value="{DynamicResource SystemBaseMediumHighColorBrush}" />
        <Setter Property="Control.Background" Value="{DynamicResource SystemAltHighColorBrush}" />
        <Setter Property="Control.BorderBrush" Value="DarkGray"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="TextBlock.TextAlignment" Value="Right" />
        <Setter Property="widgets:ProteusProp.Accent" Value="{DynamicResource CorpColor}" />
        <Setter Property="Watermark" Value="{Binding ProteusProp.Watermark, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <xcwt:ButtonSpinner
                        x:Name="PART_Spinner"
                        AllowSpin="{Binding AllowSpin, RelativeSource={RelativeSource TemplatedParent}}"
                        BorderBrush="{x:Null}"
                        BorderThickness="0"
                        ButtonSpinnerLocation="{Binding ButtonSpinnerLocation, RelativeSource={RelativeSource TemplatedParent}}"
                        Background="{x:Null}"
                        HorizontalContentAlignment="Stretch"
                        IsTabStop="False"
                        Template="{StaticResource SpinnerTemplate}"
                        ShowButtonSpinner="{Binding ShowButtonSpinner, RelativeSource={RelativeSource TemplatedParent}}"
                        VerticalContentAlignment="Stretch">
                        <Grid>
                            <Border
                            x:Name="border"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            Opacity="0.5"/>
                            <DockPanel VerticalAlignment="Center" MinHeight="20">
                                <TextBlock
                                    x:Name="symbol" Text="{TemplateBinding widgets:ProteusProp.Icon}"
                                    TextAlignment="Center" VerticalAlignment="Center" Foreground="Gray" />
                                <TextBlock
                                    x:Name="watermark"
                                    VerticalAlignment="Center"
                                    Margin="5,0"
                                    Visibility="Collapsed"
                                    Text="{TemplateBinding widgets:ProteusProp.Watermark}"
                                    IsHitTestVisible="False"
                                    Foreground="Gray"
                                    FontStyle="Italic" />
                                <xctk:WatermarkTextBox
                                    x:Name="PART_TextBox"
                                    AutoMoveFocus="{Binding AutoMoveFocus, RelativeSource={RelativeSource TemplatedParent}}"
                                    AutoSelectBehavior="{Binding AutoSelectBehavior, RelativeSource={RelativeSource TemplatedParent}}" 
                                    AcceptsReturn="False" 
                                    BorderThickness="0"
                                    Background="Transparent" 
                                    ContextMenu="{TemplateBinding ContextMenu}"
                                    Foreground="{TemplateBinding Foreground}"
                                    FontWeight="{TemplateBinding FontWeight}" 
                                    FontStyle="{TemplateBinding FontStyle}"
                                    FontStretch="{TemplateBinding FontStretch}"
                                    FontSize="{TemplateBinding FontSize}" 
                                    FontFamily="{TemplateBinding FontFamily}"
                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    IsTabStop="True" 
                                    IsUndoEnabled="True"
                                    MinWidth="20"
                                    MaxLength="{Binding MaxLength, RelativeSource={RelativeSource TemplatedParent}}" 
                                    Padding="{TemplateBinding Padding}"
                                    TextAlignment="{Binding TextAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                                    TextWrapping="NoWrap"
                                    TabIndex="{TemplateBinding TabIndex}"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    WatermarkTemplate="{Binding WatermarkTemplate, RelativeSource={RelativeSource TemplatedParent}}" 
                                    Watermark="{Binding Watermark, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </DockPanel>
                        </Grid>
                    </xcwt:ButtonSpinner>
                    <ControlTemplate.Triggers>
                        <Trigger Property="xcwtp:InputBase.Text" Value="">
                            <Setter Property="Visibility" TargetName="watermark" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" TargetName="symbol"
                                    Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}"
                                           Value="False" />
                                <Condition
                                    Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}"
                                    Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}"
                                     Value="True">
                            <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True" />
                        </DataTrigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="Foreground" TargetName="symbol" Value="{StaticResource CorpColor}" />
                            <Setter Property="Visibility" TargetName="watermark" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Text" TargetName="symbol" Value="🛇" />
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger Property="widgets:ProteusProp.Warned" Value="True">
                            <Setter Property="Foreground" TargetName="symbol" Value="DarkRed" />
                            <Setter Property="Background" TargetName="PART_Spinner" Value="{StaticResource BadColor}" />
                        </Trigger>
                        <Trigger Property="xcwtp:InputBase.IsReadOnly" Value="True">
                            <Setter Property="BorderBrush" TargetName="PART_Spinner" Value="{x:Null}" />
                            <Setter Property="Background" TargetName="PART_Spinner" Value="{x:Null}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="widgets:ProteusProp.Warned" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" TargetName="symbol" Value="Red" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="widgets:ProteusProp.Warned" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" TargetName="symbol" Value="Red" />
                        </MultiTrigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="FocusManager.FocusedElement" TargetName="PART_TextBox"
                                    Value="{Binding ElementName=PART_TextBox}" />
                        </Trigger>
                        <Trigger Property="widgets:ProteusProp.WatermarkAlwaysVisible" Value="True">
                            <Setter Property="Visibility" TargetName="watermark" Value="Visible" />
                            <Setter Property="HorizontalAlignment" TargetName="watermark" Value="Left"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PickerBase" TargetType="{x:Type xctk:DateTimePickerBase}">
        <Setter Property="Control.Foreground" Value="{DynamicResource SystemBaseMediumHighColorBrush}" />
        <Setter Property="Control.Background" Value="{DynamicResource SystemAltHighColorBrush}" />
        <Setter Property="Control.BorderBrush" Value="DarkGray"/>
        <Setter Property="BorderThickness" Value="1,1,0,1"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="TextAlignment" Value="Right"/>
        <Setter Property="WatermarkTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding}" Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Focusable="False" Margin="0,0,3,0"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:DateTimePickerBase}">
                    <Grid x:Name="root">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <xctk:ButtonSpinner
                            x:Name="PART_Spinner"
                            AllowSpin="{TemplateBinding AllowSpin}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            ButtonSpinnerLocation="{TemplateBinding ButtonSpinnerLocation}"
                            Background="{TemplateBinding Background}"
                            HorizontalContentAlignment="Stretch"
                            IsTabStop="False"
                            Template="{StaticResource SpinnerTemplate}"
                            ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}"
                            VerticalContentAlignment="Stretch">
                            <DockPanel VerticalAlignment="Center" MinHeight="20">
                                <TextBlock x:Name="symbol" Text="{TemplateBinding widgets:ProteusProp.Icon}"
                                       TextAlignment="Center" VerticalAlignment="Center" Foreground="Gray" />
                                <Grid>
                                    <TextBlock
                                        x:Name="watermark"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Right"
                                        Margin="5,0"
                                        Visibility="Collapsed"
                                        Text="{TemplateBinding widgets:ProteusProp.Watermark}"
                                        Foreground="LightGray"
                                        FontStyle="Italic" />
                                    <xctk:WatermarkTextBox 
                                        x:Name="PART_TextBox"
                                        AcceptsReturn="False" 
                                        BorderThickness="0"
                                        Background="Transparent"
                                        Foreground="{TemplateBinding Foreground}"
                                        FontWeight="{TemplateBinding FontWeight}"
                                        FontStyle="{TemplateBinding FontStyle}"
                                        FontStretch="{TemplateBinding FontStretch}"
                                        FontSize="{TemplateBinding FontSize}"
                                        FontFamily="{TemplateBinding FontFamily}"
                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        IsTabStop="True"
                                        IsUndoEnabled="True" 
                                        MinWidth="20"
                                        Padding="{TemplateBinding Padding}"
                                        TextAlignment="{TemplateBinding TextAlignment}" 
                                        TextWrapping="NoWrap"
                                        Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}"
                                        TabIndex="{TemplateBinding TabIndex}"
                                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </Grid>
                            </DockPanel>
                        </xctk:ButtonSpinner>
                        <ToggleButton
                            x:Name="_timePickerToggleButton"
                            Background="White"
                            Grid.Column="1"
                            Focusable="False" 
                            IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}">
                            <ToggleButton.IsHitTestVisible>
                                <Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.Converter>
                                        <xctk:InverseBoolConverter/>
                                    </Binding.Converter>
                                </Binding>
                            </ToggleButton.IsHitTestVisible>
                            <ToggleButton.IsEnabled>
                                <Binding Path="IsReadOnly" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.Converter>
                                        <xctk:InverseBoolConverter/>
                                    </Binding.Converter>
                                </Binding>
                            </ToggleButton.IsEnabled>
                            <ToggleButton.Style>
                                <Style TargetType="{x:Type ToggleButton}">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                <Grid SnapsToDevicePixels="True">
                                                    <xctk:ButtonChrome
                                                        x:Name="ToggleButtonChrome"
                                                        CornerRadius="0"
                                                        RenderMouseOver="{TemplateBinding IsMouseOver}"
                                                        RenderPressed="{TemplateBinding IsPressed}"
                                                        RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:TimePicker}}}"
                                                        RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:TimePicker}}}">
                                                        <Grid>
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="*"/>
                                                                <ColumnDefinition Width="Auto"/>
                                                            </Grid.ColumnDefinitions>
                                                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Stretch"/>
                                                            <Grid x:Name="arrowGlyph" Grid.Column="1" IsHitTestVisible="False" Margin="5">
                                                                <Path x:Name="Arrow" Data="M0,0L3,0 4.5,1.5 6,0 9,0 4.5,4.5z" Fill="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" Height="5" Margin="0,1,0,0" Width="9"/>
                                                            </Grid>
                                                        </Grid>
                                                    </xctk:ButtonChrome>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Fill" TargetName="Arrow" Value="#FFAFAFAF"/>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ToggleButton.Style>
                            <ToggleButton.Visibility>
                                <TemplateBinding Property="ShowDropDownButton">
                                    <TemplateBindingExtension.Converter>
                                        <BooleanToVisibilityConverter/>
                                    </TemplateBindingExtension.Converter>
                                </TemplateBinding>
                            </ToggleButton.Visibility>
                        </ToggleButton>
                        <fw:AcrylicPopup
                            x:Name="PART_Popup"
                            AllowsTransparency="True"
                            IsOpen="{Binding IsChecked, ElementName=_timePickerToggleButton}"
                            StaysOpen="False"
                            ToolTip="{TemplateBinding widgets:ProteusProp.Watermark}">
                            <Popup.Resources>
                                <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
                                    <Style.Triggers>
                                        <Trigger Property="Content" Value="">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Popup.Resources>
                            <Grid Background="{DynamicResource SystemBaseLowColorBrush}">
                                <ListBox x:Name="PART_TimeListItems" BorderThickness="0" DisplayMemberPath="Display">
                                    <ListBox.ItemContainerStyle>
                                        <Style TargetType="{x:Type ListBoxItem}">
                                            <Setter Property="Padding" Value="4"/>
                                            <Style.Triggers>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsMouseOver" Value="True"/>
                                                        <Condition Property="IsSelected" Value="False"/>
                                                    </MultiTrigger.Conditions>
                                                    <Setter Property="Background" Value="#FFB8E0F3"/>
                                                    <Setter Property="BorderBrush" Value="#FF26A0DA"/>
                                                </MultiTrigger>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsMouseOver" Value="False"/>
                                                        <Condition Property="IsSelected" Value="True"/>
                                                    </MultiTrigger.Conditions>
                                                    <Setter Property="Background" Value="#FFC4E5F6"/>
                                                    <Setter Property="BorderBrush" Value="#FF26A0DA"/>
                                                </MultiTrigger>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsMouseOver" Value="True"/>
                                                        <Condition Property="IsSelected" Value="True"/>
                                                    </MultiTrigger.Conditions>
                                                    <Setter Property="Background" Value="#FFD1E8FF"/>
                                                    <Setter Property="BorderBrush" Value="#FF66A7E8"/>
                                                </MultiTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ListBox.ItemContainerStyle>
                                </ListBox>
                            </Grid>

                        </fw:AcrylicPopup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Value" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="watermark" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlMouseOverBorderKey, TypeInTargetAssembly={x:Type themes1:ResourceKeys}}}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True"/>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True"/>
                        </DataTrigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="Foreground" TargetName="symbol" Value="{StaticResource CorpColor}" />
                            <Setter Property="Visibility" TargetName="watermark" Value="Collapsed" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type themes1:ResourceKeys}}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Text" TargetName="symbol" Value="🛇" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="widgets:ProteusProp.Warned" Value="True">
                            <Setter Property="Foreground" TargetName="symbol" Value="DarkRed" />
                            <Setter Property="Background" TargetName="PART_Spinner" Value="{StaticResource BadColor}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="widgets:ProteusProp.Warned" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" TargetName="symbol" Value="Red" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="widgets:ProteusProp.Warned" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" TargetName="symbol" Value="Red" />
                        </MultiTrigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="FocusManager.FocusedElement" TargetName="PART_TextBox" Value="{Binding ElementName=PART_TextBox}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                <Condition Value="DateTimePicker">
                                    <Condition.Binding>
                                        <Binding Path="TemplatedParent" RelativeSource="{RelativeSource Self}">
                                            <Binding.Converter>
                                                <xctk:ObjectTypeToNameConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsHitTestVisible" TargetName="_timePickerToggleButton" Value="True"/>
                        </MultiDataTrigger>
                        <Trigger Property="widgets:ProteusProp.WatermarkAlwaysVisible" Value="True">
                            <Setter Property="Visibility" TargetName="watermark" Value="Visible" />
                            <Setter Property="HorizontalAlignment" TargetName="watermark" Value="Left"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TabItemBase">
        <Setter Property="Control.Foreground" Value="{DynamicResource SystemBaseHighColorBrush}"/>
        <Setter Property="Control.FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Control.Padding" Value="8,2"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource CorpColor}"/>
        <Setter Property="Control.BorderThickness" Value="0,0,0,2"></Setter>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="true"
                        Background="Transparent"
                        BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter 
                            x:Name="contentPresenter"
                            ContentSource="Header"
                            Focusable="False"
                            HorizontalAlignment="Center"
                            Margin="{TemplateBinding Padding}"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="Transparent"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{StaticResource CorpColor2}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>       
    </Style>

    <!-- Button -->
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonRevealStyle}">
        <Setter Property="MinWidth" Value="28"/>
        <Setter Property="MinHeight" Value="28"/>
        <!--<Setter Property="Background" Value="Transparent"/>-->
        <Setter Property="Padding" Value="5,0"/>
    </Style>
    <Style x:Key="SmallBtn" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{DynamicResource SystemBaseMediumHighColorBrush}"/>
        <Setter Property="Background" Value="{DynamicResource SystemBaseLowColorBrush}"/>
        <Setter Property="widgets:ProteusProp.Accent" Value="{StaticResource CorpColor}" />
        <Setter Property="widgets:ProteusProp.TextAccent" Value="{DynamicResource SystemAltHighColorBrush}" />
        <Setter Property="widgets:ProteusProp.TextPressAccent" Value="{DynamicResource SystemAltLowLowColorBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SystemBaseMediumLowColorBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                        MinHeight="16"
                        MinWidth="16">
                        <Rectangle
                                x:Name="border"
                                RadiusX="5"
                                RadiusY="5"
                                Fill="{TemplateBinding Background}"
                                StrokeThickness="{TemplateBinding BorderThickness}"
                                Stroke="{TemplateBinding BorderBrush}" />
                        <Grid>
                            <mcart:BusyIndicator
                                x:Name="busyIndicator"
                                Radius="8"
                                Visibility="Collapsed"
                                Thickness="2"
                                Stroke="{TemplateBinding widgets:ProteusProp.Accent}"
                                HorizontalAlignment="Center"/>
                            <ContentPresenter
                                x:Name="contentPresenter"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Content="{TemplateBinding Content}"
                                ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                Focusable="False"
                                HorizontalAlignment="Stretch"
                                Margin="{TemplateBinding Padding}"
                                RecognizesAccessKey="True"
                                TextBlock.TextAlignment="Center"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="widgets:ProteusProp.Busy" Value="True">
                            <Setter Property="IsEnabled" Value="False" />
                            <Setter Property="Visibility" TargetName="busyIndicator" Value="Visible" />
                        </Trigger>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="Stroke" TargetName="border"
                                    Value="{Binding (widgets:ProteusProp.Accent), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="border"
                                    Value="{Binding (widgets:ProteusProp.Accent), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Stroke" TargetName="border"
                                    Value="{Binding (widgets:ProteusProp.Accent), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="TextBlock.Foreground" TargetName="contentPresenter"
                                    Value="{Binding (widgets:ProteusProp.TextAccent), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Stroke" TargetName="border"
                                    Value="{Binding (widgets:ProteusProp.Accent), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Fill" TargetName="border" Value="White" />
                            <Setter Property="TextBlock.Foreground" TargetName="contentPresenter"
                                    Value="{Binding (widgets:ProteusProp.TextPressAccent), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="border" Value="#FFF4F4F4" />
                            <Setter Property="Stroke" TargetName="border" Value="#FFADB2B5" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="EmbossBtn" TargetType="{x:Type ButtonBase}">
        <Setter Property="widgets:ProteusProp.Accent" Value="{StaticResource CorpColor}" />
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid x:Name="grdRoot">
                        <mcart:BusyIndicator
                            x:Name="busyIndicator"
                            Radius="8"
                            Visibility="Collapsed"
                            Thickness="2"
                            Stroke="{TemplateBinding widgets:ProteusProp.Accent}"
                            HorizontalAlignment="Center"/>
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Opacity="0.5"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Content="{TemplateBinding Content}"
                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                            Focusable="False"
                            HorizontalAlignment="Stretch"
                            Margin="{TemplateBinding Padding}"
                            RecognizesAccessKey="True"
                            TextBlock.TextAlignment="Center"
                            Effect="{TemplateBinding Effect}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                        </ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Inline.Foreground" TargetName="contentPresenter" Value="{StaticResource CorpColor}"/>
                        </Trigger>
                        <Trigger Property="widgets:ProteusProp.Busy" Value="True">
                            <Setter Property="IsEnabled" Value="False"/>
                            <Setter Property="Visibility" TargetName="busyIndicator" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.25"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.25"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="EmbossBtnShadow" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource EmbossBtn}">
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect BlurRadius="0" ShadowDepth="1" Color="White"/>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DangerousBtn" BasedOn="{StaticResource {x:Type Button}}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource BadColor2}" />
        <Setter Property="widgets:ProteusProp.Accent" Value="{StaticResource BadColor}" />
        <Setter Property="TextElement.Foreground" Value="DarkRed" />
    </Style>
    <Style x:Key="BigRoundBtn" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{DynamicResource SystemBaseMediumHighColorBrush}"/>
        <Setter Property="BorderThickness" Value="4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid
                        x:Name="grdContent"
                        Focusable="False"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        Margin="{TemplateBinding Padding}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                        <Ellipse
                            x:Name="ellBG"
                            Height="64"
                            Width="64"
                            Stroke="White"
                            StrokeThickness="{TemplateBinding BorderThickness}"
                            Fill="{TemplateBinding Background}" />
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Margin="3.5"
                            Height="50"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Top"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            TextElement.FontSize="40"
                            TextElement.Foreground="{TemplateBinding Foreground}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <mcart:BusyIndicator
                            x:Name="busyIndicator"
                            Radius="30"
                            Visibility="Hidden"
                            Thickness="{TemplateBinding BorderThickness}"
                            Stroke="{TemplateBinding widgets:ProteusProp.Accent}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="widgets:ProteusProp.Busy" Value="True">
                            <Setter Property="IsEnabled" Value="False" />
                            <Setter Property="Visibility" TargetName="busyIndicator" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter
                                Property="Fill"
                                TargetName="ellBG"
                                Value="{Binding (widgets:ProteusProp.Accent), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="grdContent" Value="0.5" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Stroke" TargetName="ellBG"
                                    Value="{Binding (widgets:ProteusProp.Accent), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="ellBG" Value="White" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter"
                                    Value="{Binding (widgets:ProteusProp.Accent), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- GridSplitter -->
    <Style TargetType="{x:Type GridSplitter}">
        <Setter Property="Grid.Column" Value="1" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="#18000000"/>
        <Setter Property="ResizeDirection" Value="Columns"/>
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <Border 
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}">
                        <StackPanel Width="15" VerticalAlignment="Center">
                            <Ellipse Width="5" Height="5" Margin="0,2" Fill="{TemplateBinding Foreground}"/>
                            <Ellipse Width="5" Height="5" Margin="0,2" Fill="{TemplateBinding Foreground}"/>
                            <Ellipse Width="5" Height="5" Margin="0,2" Fill="{TemplateBinding Foreground}"/>
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type GridSplitter}" x:Key="RowSplitter">
        <Setter Property="Grid.Row" Value="1" />
        <Setter Property="Height" Value="3" />
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Cursor" Value="SizeNS"/>
        <Setter Property="ResizeDirection" Value="Rows"/>
    </Style>
    <!-- mcart:StretchyWrapPanel -->
    <Style TargetType="mcart:StretchyWrapPanel">
        <Setter Property="MinWidth" Value="40"/>
        <Setter Property="MinHeight" Value="10"/>
    </Style>
    <!-- Border -->
    <Style TargetType="{x:Type Border}" x:Key="Floater">
        <Setter Property="Margin" Value="10"/>
        <Setter Property="Background" Value="{StaticResource SplashBg2}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="BorderBrush" Value="Gray"/>
    </Style>
    <Style TargetType="TabItem" BasedOn="{StaticResource TabItemBase}"/>

    <Style TargetType="{x:Type xcwt:TimePicker}" BasedOn="{StaticResource PickerBase}">
        <Setter Property="widgets:ProteusProp.Icon" Value="🕗" />
    </Style>
    <Style TargetType="{x:Type xcwt:DateTimePicker}">        
        <Setter Property="widgets:ProteusProp.Icon" Value="📆" />
    </Style>
    <Style TargetType="{x:Type xcwt:DecimalUpDown}" BasedOn="{StaticResource UpDownBase}">
        <Setter Property="widgets:ProteusProp.Icon" Value="💵" />
        <Setter Property="FormatString" Value="C" />
    </Style>
    <Style TargetType="{x:Type xcwt:ByteUpDown}" BasedOn="{StaticResource UpDownBase}">
        <Setter Property="widgets:ProteusProp.Icon" Value="#" />
    </Style>
    <Style TargetType="{x:Type xcwt:ShortUpDown}" BasedOn="{StaticResource UpDownBase}">
        <Setter Property="widgets:ProteusProp.Icon" Value="#" />
    </Style>
    <Style TargetType="{x:Type xcwt:IntegerUpDown}" BasedOn="{StaticResource UpDownBase}">
        <Setter Property="widgets:ProteusProp.Icon" Value="#" />
    </Style>
    <Style TargetType="{x:Type xcwt:LongUpDown}" BasedOn="{StaticResource UpDownBase}">
        <Setter Property="widgets:ProteusProp.Icon" Value="#" />
    </Style>
    <Style TargetType="{x:Type xcwt:SingleUpDown}" BasedOn="{StaticResource UpDownBase}">
        <Setter Property="widgets:ProteusProp.Icon" Value="%" />
    </Style>
    <Style TargetType="{x:Type xcwt:DoubleUpDown}" BasedOn="{StaticResource UpDownBase}">
        <Setter Property="widgets:ProteusProp.Icon" Value="#" />
    </Style>
    <Style TargetType="{x:Type xcwt:DateTimeUpDown}" BasedOn="{StaticResource UpDownBase}">
        <Setter Property="widgets:ProteusProp.Icon" Value="📆" />
    </Style>
    <Style TargetType="{x:Type ScrollViewer}">
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
    </Style>

    <!-- TextBox -->
    <Style BasedOn="{StaticResource EntryBase}" TargetType="{x:Type TextBox}">
        <Setter Property="widgets:ProteusProp.Icon" Value="✎" />
    </Style>
    <Style x:Key="SearchBox" BasedOn="{StaticResource {x:Type TextBox}}" TargetType="{x:Type TextBox}">
        <Setter Property="widgets:ProteusProp.Watermark" Value="Buscar..."/>
        <Setter Property="widgets:ProteusProp.Icon" Value="🔍"></Setter>
    </Style>
    <Style x:Key="UserBox" BasedOn="{StaticResource {x:Type TextBox}}" TargetType="{x:Type TextBox}">
        <Setter Property="widgets:ProteusProp.Watermark" Value="Usuario"/>
        <Setter Property="widgets:ProteusProp.Icon" Value="👤"/>
    </Style>
    <Style x:Key="BigText" BasedOn="{StaticResource {x:Type TextBox}}" TargetType="{x:Type TextBox}">
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="MinHeight" Value="60"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="AcceptsReturn" Value="True"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
    </Style>

    <Style TargetType="xctk:RichTextBox">
        <Setter Property="MinHeight" Value="120"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource SystemBaseMediumHighColorBrush}" />
        <Setter Property="Control.Background" Value="{DynamicResource SystemAltHighColorBrush}" />
        <Setter Property="Control.BorderBrush" Value="DarkGray"/>
        <Setter Property="ContentControl.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <!--<Setter Property="xctk:RichTextBoxFormatBarManager.FormatBar">
            <Setter.Value>
                <xctk:RichTextBoxFormatBar/>
            </Setter.Value>
        </Setter>-->
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Grid>
                        <Border
                            x:Name="border"
                            Opacity="0.5"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        </Border>
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                            <Setter
                                Property="BorderBrush" TargetName="border"
                                Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource CorpColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="xctk:RichTextBoxFormatBar">
        <Setter Property="Foreground" Value="{DynamicResource SystemBaseMediumHighColorBrush}" />
        <Setter Property="Control.Foreground" Value="{DynamicResource SystemBaseMediumHighColorBrush}" />
        <Setter Property="Control.Background" Value="{DynamicResource SystemAltHighColorBrush}" />
    </Style>

    <Style BasedOn="{StaticResource EntryBase}" TargetType="{x:Type PasswordBox}">
        <Setter Property="widgets:ProteusProp.Icon" Value="🔑" />
        <Setter Property="widgets:ProteusProp.Watermark" Value="Contraseña"/>
    </Style>
    <Style BasedOn="{StaticResource EntryBase}" TargetType="{x:Type xcwt:MaskedTextBox}">
        <Setter Property="widgets:ProteusProp.Icon" Value="#" />
        <Setter Property="widgets:ProteusProp.WatermarkAlwaysVisible" Value="True" />
        <Setter Property="TextAlignment" Value="Right" />
    </Style>
    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="WrapWithOverflow" />
        <Setter Property="Foreground" Value="{DynamicResource SystemBaseHighColorBrush}"/>
    </Style>
    <Style TargetType="{x:Type mcart:ProgressRing}">
        <Setter Property="TextFormat" Value="{}{0}%" />
        <Setter Property="Fill" Value="{DynamicResource CorpColor}" />
        <Setter Property="RingStroke" Value="{DynamicResource SystemBaseLowColorBrush}" />
    </Style>
    <Style TargetType="{x:Type mcart:BusyIndicator}">
        <Setter Property="Stroke" Value="{DynamicResource CorpColor}" />
    </Style>
    <Style TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{DynamicResource CorpColor}" />
        <Setter Property="Background" Value="LightGray" />
    </Style>
    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="{x:Null}" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border
                            x:Name="checkBoxBorder"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="1" VerticalAlignment="Center">
                            <Grid x:Name="markGrid">
                                <Path
                                    x:Name="optionMark"
                                    Data="F1M9.97498,1.22334L4.6983,9.09834 4.52164,9.09834 0,5.19331 1.27664,3.52165 4.255,6.08833 8.33331,1.52588E-05 9.97498,1.22334z"
                                    Fill="{DynamicResource CorpColor}"
                                    Margin="1" Opacity="0" Stretch="None" />
                                <Rectangle x:Name="indeterminateMark" Fill="{DynamicResource CorpColor}" Margin="2"
                                           Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter
                            x:Name="contentPresenter"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Content="{TemplateBinding Content}"
                            Grid.Column="1"
                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                            Focusable="False"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="{TemplateBinding Padding}"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="#FFF3F9FF" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder"
                                    Value="{StaticResource CorpColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="#FFE6E6E6" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="#FFBCBCBC" />
                            <Setter Property="Fill" TargetName="optionMark" Value="DarkGray" />
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="DarkGray" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="#FFD9ECFF" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="#FF3C77DD" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1" />
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0" />
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1" />
                        </Trigger>
                        <Trigger Property="widgets:ProteusProp.Warned" Value="True">
                            <Setter Property="Foreground" Value="DarkRed" />
                            <Setter Property="Background" Value="{StaticResource BadColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border
                            x:Name="radioButtonBorder"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            CornerRadius="100"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="1,1,2,1"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid" Margin="2">
                                <Ellipse
                                    x:Name="optionMark"
                                    Fill="{DynamicResource CorpColor}"
                                    MinWidth="6" MinHeight="6" Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Grid.Column="1"
                            Focusable="False"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="{TemplateBinding Padding}"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="#FFF3F9FF" />
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder"
                                    Value="{StaticResource CorpColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="#ffe6e6e6" />
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="#ffbcbcbc" />
                            <Setter Property="Fill" TargetName="optionMark" Value="DarkGray" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="#FFD9ECFF" />
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="#FF3C77DD" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0.4" />
                        </Trigger>
                        <Trigger Property="widgets:ProteusProp.Warned" Value="True">
                            <Setter Property="Foreground" Value="DarkRed" />
                            <Setter Property="Background" Value="{StaticResource BadColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="Foreground" Value="{StaticResource ControlText}" />
        <Setter Property="Background" Value="{DynamicResource SystemAltHighColorBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="16" />
                        </Grid.ColumnDefinitions>
                        <Popup
                            x:Name="PART_Popup"
                            AllowsTransparency="true"
                            Grid.ColumnSpan="2"
                            IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Margin="1"
                            PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                            Placement="Bottom">
                            <themes:SystemDropShadowChrome 
                                x:Name="shadow" Color="Transparent"
                                MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                                <Border x:Name="dropDownBorder"
                                        BorderBrush="DarkGray"
                                        BorderThickness="1"
                                        Background="{DynamicResource SystemAltHighColorBrush}">
                                    <ScrollViewer x:Name="DropDownScrollViewer">
                                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0"
                                                    VerticalAlignment="Top" Width="0">
                                                <Rectangle x:Name="opaqueRect"
                                                           Fill="{Binding Background, ElementName=dropDownBorder}"
                                                           Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                                           Width="{Binding ActualWidth, ElementName=dropDownBorder}" />
                                            </Canvas>
                                            <ItemsPresenter x:Name="ItemsPresenter"
                                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </themes:SystemDropShadowChrome>
                        </Popup>
                        <ToggleButton MinHeight="24"
                            Grid.Row="0"
                            Margin="0"
                            Grid.Column="0"
                            x:Name="toggleButton"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Grid.ColumnSpan="2"
                            IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">                                    
                                    <Border
                                        x:Name="templateRoot"
                                        SnapsToDevicePixels="true"
                                        Margin="0"
                                        Background="{x:Null}"
                                        BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                                        <Grid>
                                            <Rectangle Fill="{TemplateBinding Background}" Opacity="0.5"/>
                                            <Border
                                                x:Name="splitBorder"
                                                Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                                                SnapsToDevicePixels="true"
                                                Margin="0"
                                                HorizontalAlignment="Right">
                                                <Path x:Name="arrow" VerticalAlignment="Center" Margin="0"
                                                      HorizontalAlignment="Center" Fill="Gray"
                                                      Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" />
                                            </Border>
                                        </Grid>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition
                                                    Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                                    Value="true" />
                                                <Condition
                                                    Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                                    Value="false" />
                                                <Condition
                                                    Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
                                                    Value="false" />
                                                <Condition
                                                    Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
                                                    Value="true" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Background" TargetName="templateRoot"
                                                    Value="{DynamicResource ComboBox.Static.Editable.Background}" />
                                            <Setter Property="BorderBrush" TargetName="templateRoot"
                                                    Value="{DynamicResource ComboBox.Static.Editable.Border}" />
                                            <Setter Property="Background" TargetName="splitBorder"
                                                    Value="{DynamicResource ComboBox.Static.Editable.Button.Background}" />
                                            <Setter Property="BorderBrush" TargetName="splitBorder"
                                                    Value="{DynamicResource ComboBox.Static.Editable.Button.Border}" />
                                        </MultiDataTrigger>
                                        <Trigger Property="IsMouseOver" Value="true">
                                            <Setter Property="Fill" TargetName="arrow"
                                                    Value="{StaticResource CorpColor}" />
                                        </Trigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition
                                                    Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                                    Value="true" />
                                                <Condition
                                                    Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                                    Value="false" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Background" TargetName="templateRoot"
                                                    Value="{DynamicResource ComboBox.MouseOver.Background}" />
                                            <Setter Property="BorderBrush" TargetName="templateRoot"
                                                    Value="{DynamicResource ComboBox.MouseOver.Border}" />
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition
                                                    Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                                    Value="true" />
                                                <Condition
                                                    Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                                    Value="true" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Background" TargetName="templateRoot"
                                                    Value="{DynamicResource ComboBox.MouseOver.Editable.Background}" />
                                            <Setter Property="BorderBrush" TargetName="templateRoot"
                                                    Value="{DynamicResource ComboBox.MouseOver.Editable.Border}" />
                                            <Setter Property="Background" TargetName="splitBorder"
                                                    Value="{DynamicResource ComboBox.MouseOver.Editable.Button.Background}" />
                                            <Setter Property="BorderBrush" TargetName="splitBorder"
                                                    Value="{DynamicResource ComboBox.MouseOver.Editable.Button.Border}" />
                                        </MultiDataTrigger>
                                        <Trigger Property="IsPressed" Value="true">
                                            <Setter Property="Fill" TargetName="arrow"
                                                    Value="{DynamicResource ComboBox.Pressed.Glyph}" />
                                        </Trigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition
                                                    Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
                                                    Value="true" />
                                                <Condition
                                                    Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                                    Value="false" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Background" TargetName="templateRoot"
                                                    Value="{DynamicResource ComboBox.Pressed.Background}" />
                                            <Setter Property="BorderBrush" TargetName="templateRoot"
                                                    Value="{DynamicResource ComboBox.Pressed.Border}" />
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition
                                                    Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
                                                    Value="true" />
                                                <Condition
                                                    Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                                    Value="true" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Background" TargetName="templateRoot"
                                                    Value="{DynamicResource ComboBox.Pressed.Editable.Background}" />
                                            <Setter Property="BorderBrush" TargetName="templateRoot"
                                                    Value="{DynamicResource ComboBox.Pressed.Editable.Border}" />
                                            <Setter Property="Background" TargetName="splitBorder"
                                                    Value="{DynamicResource ComboBox.Pressed.Editable.Button.Background}" />
                                            <Setter Property="BorderBrush" TargetName="splitBorder"
                                                    Value="{DynamicResource ComboBox.Pressed.Editable.Button.Border}" />
                                        </MultiDataTrigger>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter Property="Fill" TargetName="arrow"
                                                    Value="{DynamicResource ComboBox.Disabled.Glyph}" />
                                        </Trigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition
                                                    Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
                                                    Value="false" />
                                                <Condition
                                                    Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                                    Value="false" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Background" TargetName="templateRoot"
                                                    Value="{DynamicResource ComboBox.Disabled.Background}" />
                                            <Setter Property="BorderBrush" TargetName="templateRoot"
                                                    Value="{DynamicResource ComboBox.Disabled.Border}" />
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition
                                                    Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
                                                    Value="false" />
                                                <Condition
                                                    Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                                    Value="true" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Background" TargetName="templateRoot"
                                                    Value="{DynamicResource ComboBox.Disabled.Editable.Background}" />
                                            <Setter Property="BorderBrush" TargetName="templateRoot"
                                                    Value="{DynamicResource ComboBox.Disabled.Editable.Border}" />
                                            <Setter Property="Background" TargetName="splitBorder"
                                                    Value="{DynamicResource ComboBox.Disabled.Editable.Button.Background}" />
                                            <Setter Property="BorderBrush" TargetName="splitBorder"
                                                    Value="{DynamicResource ComboBox.Disabled.Editable.Button.Border}" />
                                        </MultiDataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ToggleButton.Template>
                        </ToggleButton>
                        <StackPanel Orientation="Horizontal" Margin="{TemplateBinding Padding}">
                            <TextBlock
                                x:Name="symbol"
                                Text="{TemplateBinding widgets:ProteusProp.Icon}"
                                TextAlignment="Center"
                                VerticalAlignment="Center"
                                Foreground="Gray"/>
                            <TextBlock
                                x:Name="watermark"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Text="{TemplateBinding widgets:ProteusProp.Watermark}"
                                IsHitTestVisible="False"
                                Foreground="Gray"
                                FontStyle="Italic"
                                Margin="5,0">
                                <TextBlock.Visibility>
                                    <TemplateBinding Property="widgets:ProteusProp.WatermarkAlwaysVisible">
                                        <TemplateBindingExtension.Converter>
                                            <BooleanToVisibilityConverter/>
                                        </TemplateBindingExtension.Converter>
                                    </TemplateBinding>
                                </TextBlock.Visibility>
                            </TextBlock>
                            <ContentPresenter
                                x:Name="contentPresenter"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                Content="{TemplateBinding SelectionBoxItem}"
                                ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                IsHitTestVisible="false" Margin="{TemplateBinding Padding}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" TargetName="symbol" Value="{StaticResource CorpColor}"/>
                        </Trigger>
                        <Trigger Property="SelectedIndex" Value="-1">
                            <Setter Property="Visibility" TargetName="watermark" Value="Visible" />
                        </Trigger>
                        <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                            <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5" />
                            <Setter Property="Color" TargetName="shadow" Value="#71000000" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Height" TargetName="dropDownBorder" Value="95" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </MultiTrigger>
                        <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer"
                                 Value="false">
                            <Setter Property="Canvas.Top" TargetName="opaqueRect"
                                    Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                            <Setter Property="Canvas.Left" TargetName="opaqueRect"
                                    Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
                        </Trigger>
                        <Trigger Property="widgets:ProteusProp.Warned" Value="True">
                            <Setter Property="Foreground" Value="DarkRed" />
                            <Setter Property="Background" Value="{StaticResource BadColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TreeView}">
        <Setter Property="BorderBrush" Value="DarkGray" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource TrvItems}" />
    </Style>
    <Style TargetType="{x:Type xcwt:DropDownButton}">
        <Setter Property="Foreground" Value="{DynamicResource SystemBaseMediumHighColorBrush}"/>
        <Setter Property="Background" Value="{DynamicResource SystemBaseLowColorBrush}"/>
        <Setter Property="widgets:ProteusProp.Accent" Value="{StaticResource CorpColor}" />
        <Setter Property="widgets:ProteusProp.TextAccent" Value="{DynamicResource SystemAltHighColorBrush}" />
        <Setter Property="widgets:ProteusProp.TextPressAccent" Value="{DynamicResource SystemAltLowLowColorBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SystemBaseMediumLowColorBrush}" />
        <Setter Property="Padding" Value="6" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xcwt:DropDownButton}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
                        <ToggleButton
                            x:Name="PART_DropDownButton"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Content="{TemplateBinding Content}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            widgets:ProteusProp.Accent="{TemplateBinding widgets:ProteusProp.Accent}"
                            widgets:ProteusProp.WatermarkAlwaysVisible="{TemplateBinding widgets:ProteusProp.WatermarkAlwaysVisible}"
                            widgets:ProteusProp.Watermark="{TemplateBinding widgets:ProteusProp.Watermark}"
                            widgets:ProteusProp.TextAccent="{TemplateBinding widgets:ProteusProp.TextAccent}"
                            widgets:ProteusProp.TextPressAccent="{TemplateBinding widgets:ProteusProp.TextPressAccent}"
                            IsChecked="{Binding IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                            <ToggleButton.IsHitTestVisible>
                                <Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.Converter>
                                        <xctk:InverseBoolConverter />
                                    </Binding.Converter>
                                </Binding>
                            </ToggleButton.IsHitTestVisible>
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Rectangle
                                            x:Name="border"
                                            MinHeight="28"
                                            Grid.ColumnSpan="2"
                                            MinWidth="28"
                                            RadiusX="5"
                                            RadiusY="5"
                                            Fill="{TemplateBinding Background}"
                                            StrokeThickness="{TemplateBinding BorderThickness}"
                                            Stroke="{TemplateBinding BorderBrush}" />
                                        <mcart:StretchyWrapPanel
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                            Margin="{TemplateBinding Padding}"
                                            Grid.Column="0">
                                            <TextBlock
                                                x:Name="watermark"
                                                VerticalAlignment="Center"
                                                Margin="0,0,5,0"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                Visibility="Collapsed"
                                                Text="{TemplateBinding widgets:ProteusProp.Watermark}"
                                                Foreground="Gray"
                                                FontStyle="Italic" />
                                            <ContentPresenter
                                                x:Name="contentPresenter"
                                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                                Content="{TemplateBinding Content}"
                                                RecognizesAccessKey="True"
                                                ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                Focusable="False"
                                                TextBlock.TextAlignment="Center"/>
                                        </mcart:StretchyWrapPanel>
                                        <Path
                                            Grid.Column="1"
                                            x:Name="Arrow"
                                            Data="M0,0L3,0 4.5,1.5 6,0 9,0 4.5,4.5z"
                                            Fill="{StaticResource CorpColor}"
                                            Height="5"
                                            Margin="5"
                                            Width="9" />
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="widgets:ProteusProp.WatermarkAlwaysVisible" Value="True">
                                            <Setter Property="Visibility" TargetName="watermark" Value="Visible" />
                                        </Trigger>
                                        <Trigger Property="ContentPresenter.Content" Value="{x:Null}" SourceName="contentPresenter">
                                            <Setter Property="Visibility" TargetName="watermark" Value="Visible"/>
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter
                                                Property="Fill"
                                                TargetName="Arrow"
                                                Value="White" />
                                            <Setter
                                                Property="Fill"
                                                TargetName="border"
                                                Value="{StaticResource CorpColor}" />
                                            <Setter
                                                Property="Stroke"
                                                TargetName="border"
                                                Value="{StaticResource CorpColor}" />
                                            <Setter
                                                Property="TextBlock.Foreground"
                                                TargetName="contentPresenter"
                                                Value="White" />
                                        </Trigger>
                                        <Trigger Property="IsChecked" Value="True">
                                            <Setter
                                                Property="Stroke"
                                                TargetName="border"
                                                Value="{StaticResource CorpColor}" />
                                            <Setter Property="Fill" TargetName="border" Value="White" />
                                            <Setter
                                                Property="TextBlock.Foreground"
                                                TargetName="contentPresenter"
                                                Value="{Binding (widgets:ProteusProp.TextPressAccent), RelativeSource={RelativeSource TemplatedParent}}" />
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Fill" TargetName="Arrow" Value="#FFADB2B5" />
                                            <Setter Property="Fill" TargetName="border" Value="#FFF4F4F4" />
                                            <Setter Property="Stroke" TargetName="border" Value="#FFADB2B5" />
                                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter"
                                                    Value="Gray" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ToggleButton.Template>
                        </ToggleButton>
                        <Popup
                            x:Name="PART_Popup"
                            AllowsTransparency="True"
                            Focusable="False"
                            HorizontalOffset="1"
                            IsOpen="{Binding IsChecked, ElementName=PART_DropDownButton}"
                            Placement="{TemplateBinding DropDownPosition}"
                            StaysOpen="True"
                            VerticalOffset="1">
                            <Popup.Resources>
                                <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
                                    <Style.Triggers>
                                        <Trigger Property="Content" Value="">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Popup.Resources>
                            <Border BorderBrush="#FFABADB3" BorderThickness="1"
                                    MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                        <GradientStop Color="#FFF0F0F0" Offset="0" />
                                        <GradientStop Color="#FFE5E5E5" Offset="1" />
                                    </LinearGradientBrush>
                                </Border.Background>
                                <ScrollViewer x:Name="DropDownScrollViewer" VerticalScrollBarVisibility="Auto">
                                    <ContentPresenter x:Name="PART_ContentPresenter"
                                                      Content="{TemplateBinding DropDownContent}" />
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="widgets:ProteusProp.Warned" Value="True">
                            <Setter Property="Foreground" Value="DarkRed" />
                            <Setter Property="Background" Value="{StaticResource BadColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type DatePicker}">
        <Setter Property="widgets:ProteusProp.Icon" Value="📆" />
        <Setter Property="Foreground" Value="#FF333333"/>
        <Setter Property="IsTodayHighlighted" Value="True"/>
        <Setter Property="SelectedDateFormat" Value="Short"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="widgets:ProteusProp.Watermark" Value="Seleccione una fecha"/>
        <Setter Property="BorderBrush" Value="DarkGray"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Border
                        BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_DisabledVisual"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid x:Name="PART_Root"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid.Resources>
                                <SolidColorBrush x:Key="DisabledBrush" Color="#A5FFFFFF"/>
                            </Grid.Resources>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock
                                x:Name="symbol"
                                Text="{TemplateBinding widgets:ProteusProp.Icon}"
                                TextAlignment="Center"
                                VerticalAlignment="Center"
                                Foreground="Gray" />
                            <Button
                                x:Name="PART_Button"
                                Grid.Column="2"
                                Foreground="{TemplateBinding Foreground}"
                                Background="Transparent"
                                Focusable="False"
                                HorizontalAlignment="Left"
                                Margin="3,0,3,0"
                                VerticalAlignment="Center"
                                Style="{StaticResource EmbossBtn}"
                                Content="..."
                                Width="20"/>
                            <DatePickerTextBox
                                x:Name="PART_TextBox"
                                Grid.Column="1" 
                                Focusable="{TemplateBinding Focusable}"
                                HorizontalContentAlignment="Stretch"
                                VerticalContentAlignment="Stretch"/>
                            <TextBlock
                                x:Name="PART_Watermark"
                                Grid.Column="0"
                                FontStyle="Italic"
                                Foreground="LightGray"
                                Visibility="Collapsed"
                                Focusable="{TemplateBinding Focusable}"
                                Grid.Row="0"
                                IsHitTestVisible="False"/>
                            <Grid x:Name="PART_DisabledVisual" Grid.ColumnSpan="2" Grid.Column="0" IsHitTestVisible="False" Opacity="0" Grid.Row="0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Rectangle Grid.Column="0" Fill="#A5FFFFFF" RadiusY="1" Grid.Row="0" RadiusX="1"/>
                                <Rectangle Grid.Column="1" Fill="#A5FFFFFF" Height="18" Margin="3,0,3,0" RadiusY="1" Grid.Row="0" RadiusX="1" Width="19"/>
                                <Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=PART_TextBox}" StaysOpen="False"/>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="SelectedDate" Value="{x:Null}">
                            <Setter TargetName="PART_TextBox" Property="Text" Value="{Binding (widgets:ProteusProp.Watermark), RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="PART_TextBox" Property="FontStyle" Value="Italic"/>
                            <Setter TargetName="PART_TextBox" Property="Foreground" Value="LightGray"/>
                            <Setter TargetName="PART_TextBox" Property="TextAlignment" Value="Right"/>
                            <Setter TargetName="PART_Watermark" Property="Text" Value="{Binding (widgets:ProteusProp.Watermark), RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <Trigger Property="widgets:ProteusProp.Warned" Value="True">
                            <Setter Property="Foreground" Value="DarkRed" />
                            <Setter Property="Background" Value="{StaticResource BadColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{StaticResource ControlText}" />
        <Setter Property="Background" Value="White" />
        <Setter Property="widgets:ProteusProp.Accent" Value="{StaticResource CorpColor}" />
        <Setter Property="widgets:ProteusProp.TextAccent" Value="White" />
        <Setter Property="widgets:ProteusProp.TextPressAccent" Value="Black" />
        <Setter Property="widgets:ProteusProp.Icon" Value="📋" />
        <Setter Property="Padding" Value="6" />
        <Setter Property="BorderBrush" Value="LightGray" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Rectangle
                            x:Name="border"
                            MinHeight="28"
                            MinWidth="28"
                            RadiusX="5"
                            RadiusY="5"
                            Fill="{TemplateBinding Background}"
                            StrokeThickness="{TemplateBinding BorderThickness}"
                            Stroke="{TemplateBinding BorderBrush}"/>
                        <DockPanel
                            VerticalAlignment="Stretch"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                            <mcart:BusyIndicator
                                x:Name="busyIndicator"
                                Radius="8"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Visibility="Hidden"
                                Thickness="2"
                                Stroke="{TemplateBinding widgets:ProteusProp.Accent}"
                                Margin="5,0,0,0" />
                            <WrapPanel 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                IsHitTestVisible="False">
                                <TextBlock
                                    Margin="0,0,5,0"
                                    VerticalAlignment="Center"
                                    x:Name="Icon"
                                    Text="{TemplateBinding widgets:ProteusProp.Icon}"
                                    Foreground="{TemplateBinding widgets:ProteusProp.Accent}"/>
                                <mcart:StretchyWrapPanel
                                    VerticalAlignment="Center"
                                    Margin="{TemplateBinding Padding}">
                                    <TextBlock
                                        x:Name="watermark"
                                        Margin="0,0,5,0"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        Visibility="Collapsed"
                                        Text="{TemplateBinding widgets:ProteusProp.Watermark}"
                                        Foreground="LightGray"
                                        FontStyle="Italic" />
                                    <ContentPresenter
                                        x:Name="contentPresenter"
                                        ContentTemplate="{TemplateBinding ContentTemplate}"
                                        Content="{TemplateBinding Content}"
                                        RecognizesAccessKey="True"
                                        ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                        Focusable="False"
                                        TextBlock.TextAlignment="Center"/>
                                </mcart:StretchyWrapPanel>
                            </WrapPanel>
                        </DockPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ContentPresenter.Content" Value="{x:Null}" SourceName="contentPresenter">
                            <Setter Property="Visibility" TargetName="watermark" Value="Visible" />
                        </Trigger>
                        <Trigger Property="widgets:ProteusProp.Busy" Value="True">
                            <Setter Property="IsEnabled" Value="False" />
                            <Setter Property="Visibility" TargetName="busyIndicator" Value="Visible" />
                        </Trigger>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="Stroke" TargetName="border"
                                    Value="{Binding (widgets:ProteusProp.Accent), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!--<Setter Property="Fill" TargetName="border"
                                    Value="{Binding (widgets:ProteusProp.Accent), RelativeSource={RelativeSource TemplatedParent}}" />-->
                            <Setter Property="Fill" TargetName="border"
                                    Value="{StaticResource CorpColor}"/>
                            <Setter Property="Stroke" TargetName="border"
                                    Value="{Binding (widgets:ProteusProp.Accent), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="TextBlock.Foreground" TargetName="contentPresenter"
                                    Value="{Binding (widgets:ProteusProp.TextAccent), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="TextBlock.Foreground" TargetName="watermark"
                                    Value="{Binding (widgets:ProteusProp.TextAccent), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="TextBlock.Foreground" TargetName="Icon"
                                    Value="{Binding (widgets:ProteusProp.TextAccent), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Stroke" TargetName="border"
                                    Value="{Binding (widgets:ProteusProp.Accent), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Fill" TargetName="border" Value="White" />
                            <Setter Property="TextBlock.Foreground" TargetName="contentPresenter"
                                    Value="{Binding (widgets:ProteusProp.TextPressAccent), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="TextBlock.Foreground" TargetName="watermark"
                                    Value="{Binding (widgets:ProteusProp.TextPressAccent), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="TextBlock.Foreground" TargetName="Icon"
                                    Value="{Binding (widgets:ProteusProp.TextPressAccent), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="border" Value="#FFF4F4F4" />
                            <Setter Property="Stroke" TargetName="border" Value="#FFADB2B5" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383" />
                        </Trigger>
                        <Trigger Property="widgets:ProteusProp.Warned" Value="True">
                            <Setter Property="Foreground" Value="DarkRed" />
                            <Setter Property="Background" Value="{StaticResource BadColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type xctk:SplitButton}">
        <Setter Property="Foreground" Value="{DynamicResource SystemBaseMediumHighColorBrush}"/>
        <Setter Property="Background" Value="{DynamicResource SystemBaseLowColorBrush}"/>
        <Setter Property="widgets:ProteusProp.Accent" Value="{StaticResource CorpColor}" />
        <Setter Property="widgets:ProteusProp.TextAccent" Value="{DynamicResource SystemAltHighColorBrush}" />
        <Setter Property="widgets:ProteusProp.TextPressAccent" Value="{DynamicResource SystemAltLowLowColorBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SystemBaseMediumLowColorBrush}" />
        <Setter Property="widgets:ProteusProp.WatermarkAlwaysVisible" Value="True" />
        <Setter Property="Padding" Value="6" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{DynamicResource SystemBaseMediumColorBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:SplitButton}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Rectangle
                                x:Name="border"
                                MinHeight="28"
                                MinWidth="28"
                                RadiusX="5"
                                Grid.ColumnSpan="3"
                                RadiusY="5"
                                Fill="{TemplateBinding Background}"
                                StrokeThickness="{TemplateBinding BorderThickness}"
                                Stroke="{TemplateBinding BorderBrush}" />
                            <Button
                                widgets:ProteusProp.Accent="{TemplateBinding widgets:ProteusProp.Accent}"
                                widgets:ProteusProp.Busy="{TemplateBinding widgets:ProteusProp.Busy}"
                                widgets:ProteusProp.Icon="{TemplateBinding widgets:ProteusProp.Icon}"
                                widgets:ProteusProp.TextAccent="{TemplateBinding widgets:ProteusProp.TextAccent}"
                                widgets:ProteusProp.TextPressAccent="{TemplateBinding widgets:ProteusProp.TextPressAccent}"
                                widgets:ProteusProp.Warned="{TemplateBinding widgets:ProteusProp.Warned}"
                                widgets:ProteusProp.Watermark="{TemplateBinding widgets:ProteusProp.Watermark}"
                                widgets:ProteusProp.WatermarkAlwaysVisible="{TemplateBinding widgets:ProteusProp.WatermarkAlwaysVisible}"
                                x:Name="PART_ActionButton"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="0"
                                BorderBrush="{x:Null}"
                                Background="Transparent"
                                Padding="{TemplateBinding Padding}"
                                Content="{TemplateBinding Content}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                            </Button>
                            <Separator Grid.Column="1" Margin="0,6">
                                <Separator.LayoutTransform>
                                    <RotateTransform Angle="90"/>
                                </Separator.LayoutTransform>
                            </Separator>
                            <ToggleButton 
                                x:Name="PART_ToggleButton" 
                                Grid.Column="2"
                                IsTabStop="False"
                                Margin="0"
                                IsChecked="{Binding IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <ToggleButton.IsHitTestVisible>
                                    <Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
                                        <Binding.Converter>
                                            <xctk:InverseBoolConverter/>
                                        </Binding.Converter>
                                    </Binding>
                                </ToggleButton.IsHitTestVisible>
                                <ToggleButton.Template>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                            <Rectangle
                                            x:Name="border"
                                            MinHeight="28"
                                            MinWidth="28"
                                            RadiusX="5"
                                            RadiusY="5"
                                            Fill="Transparent"
                                            StrokeThickness="1"
                                            Stroke="{x:Null}"/>
                                            <Path 
                                                x:Name="Arrow" 
                                                Data="M0,0L3,0 4.5,1.5 6,0 9,0 4.5,4.5z"
                                                Fill="{TemplateBinding widgets:ProteusProp.Accent}" 
                                                Height="5" Margin="0,0,0,0" Width="9"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="Button.IsDefaulted" Value="True">
                                                <Setter Property="Stroke" TargetName="border"
                                    Value="{Binding (widgets:ProteusProp.Accent), RelativeSource={RelativeSource TemplatedParent}}" />
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Fill" TargetName="border"
                                    Value="{StaticResource CorpColor}"/>
                                                <Setter Property="Stroke" TargetName="border"
                                    Value="{Binding (widgets:ProteusProp.Accent), RelativeSource={RelativeSource TemplatedParent}}" />
                                            </Trigger>
                                            <Trigger Property="IsPressed" Value="True">
                                                <Setter Property="Stroke" TargetName="border"
                                    Value="{Binding (widgets:ProteusProp.Accent), RelativeSource={RelativeSource TemplatedParent}}" />
                                                <Setter Property="Fill" TargetName="border" Value="White" />
                                            </Trigger>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Fill" TargetName="border" Value="#FFF4F4F4" />
                                                <Setter Property="Stroke" TargetName="border" Value="#FFADB2B5" />
                                            </Trigger>
                                            <Trigger Property="widgets:ProteusProp.Warned" Value="True">
                                                <Setter Property="Foreground" Value="DarkRed" />
                                                <Setter Property="Background" Value="{StaticResource BadColor}" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </ToggleButton.Template>
                            </ToggleButton>
                        </Grid>
                        <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" HorizontalOffset="1" IsOpen="{Binding IsChecked, ElementName=PART_ToggleButton}" Placement="{TemplateBinding DropDownPosition}" StaysOpen="False" VerticalOffset="1">
                            <Border BorderBrush="#FFABADB3" BorderThickness="1" Background="{TemplateBinding DropDownContentBackground}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <ScrollViewer x:Name="DropDownScrollViewer" VerticalScrollBarVisibility="Auto">
                                    <ContentPresenter x:Name="PART_ContentPresenter" Content="{TemplateBinding DropDownContent}"/>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="widgets:ProteusProp.Busy" Value="True">
                            <Setter Property="IsEnabled" Value="False" />
                        </Trigger>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="Stroke" TargetName="border"
                                Value="{Binding (widgets:ProteusProp.Accent), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="border" Value="#FFF4F4F4" />
                            <Setter Property="Stroke" TargetName="border" Value="#FFADB2B5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ToolTip">
        <Setter Property="Foreground" Value="{DynamicResource SystemBaseMediumHighColorBrush}" />
        <Setter Property="Background" Value="{DynamicResource SystemAltHighColorBrush}" />
    </Style>
    <Style x:Key="BotoneraBase" TargetType="Panel">
        <Style.Resources>
            <Style BasedOn="{StaticResource {x:Type Button}}" TargetType="Button">
                <Setter Property="Margin" Value="5"/>
            </Style>
            <Style BasedOn="{StaticResource {x:Type xctk:DropDownButton}}" TargetType="xctk:DropDownButton">
                <Setter Property="Margin" Value="0"/>
            </Style>
            <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                <!--<Setter Property="TextAlignment" Value="Center"/>-->
                <Setter Property="Margin" Value="5"/>
            </Style>
            <Style TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
                <Setter Property="Margin" Value="5"/>
            </Style>
            <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                <Setter Property="Margin" Value="5"/>
            </Style>
            <Style TargetType="CheckBox" BasedOn="{StaticResource {x:Type CheckBox}}">
                <Setter Property="Margin" Value="5"/>
            </Style>
            <Style TargetType="RadioButton" BasedOn="{StaticResource {x:Type RadioButton}}">
                <Setter Property="Margin" Value="5"/>
            </Style>
            <Style TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
                <Setter Property="Margin" Value="5"/>
            </Style>
            <Style TargetType="xctk:IntegerUpDown" BasedOn="{StaticResource {x:Type xctk:IntegerUpDown}}">
                <Setter Property="Margin" Value="5"/>
            </Style>
            <Style TargetType="xctk:ByteUpDown" BasedOn="{StaticResource {x:Type xctk:ByteUpDown}}">
                <Setter Property="Margin" Value="5"/>
            </Style>
            <Style TargetType="xctk:ShortUpDown" BasedOn="{StaticResource {x:Type xctk:ShortUpDown}}">
                <Setter Property="Margin" Value="5"/>
            </Style>
            <Style TargetType="xctk:LongUpDown" BasedOn="{StaticResource {x:Type xctk:LongUpDown}}">
                <Setter Property="Margin" Value="5"/>
            </Style>
            <Style TargetType="xctk:SingleUpDown" BasedOn="{StaticResource {x:Type xctk:SingleUpDown}}">
                <Setter Property="Margin" Value="5"/>
            </Style>
            <Style TargetType="xctk:DoubleUpDown" BasedOn="{StaticResource {x:Type xctk:DoubleUpDown}}">
                <Setter Property="Margin" Value="5"/>
            </Style>
            <Style TargetType="xctk:DecimalUpDown" BasedOn="{StaticResource {x:Type xctk:DecimalUpDown}}">
                <Setter Property="Margin" Value="5"/>
            </Style>
            <Style TargetType="xctk:DateTimeUpDown" BasedOn="{StaticResource {x:Type xctk:DateTimeUpDown}}">
                <Setter Property="Margin" Value="5"/>
            </Style>
            <Style TargetType="GroupBox" BasedOn="{StaticResource {x:Type GroupBox}}">
                <Setter Property="Margin" Value="5"/>
            </Style>
            <Style TargetType="Expander" BasedOn="{StaticResource {x:Type Expander}}">
                <Setter Property="Margin" Value="5"/>
            </Style>
            <Style TargetType="DatePicker" BasedOn="{StaticResource {x:Type DatePicker}}">
                <Setter Property="Margin" Value="5"/>
            </Style>
            <Style TargetType="xctk:DateTimePicker" BasedOn="{StaticResource {x:Type xctk:DateTimePicker}}">
                <Setter Property="Margin" Value="5"/>
            </Style>
            <Style TargetType="xctk:TimePicker" BasedOn="{StaticResource {x:Type xctk:TimePicker}}">
                <Setter Property="Margin" Value="5"/>
            </Style>
            <Style TargetType="Separator" BasedOn="{StaticResource {x:Type Separator}}">
                <Setter Property="Margin" Value="5"/>
            </Style>
            <Style TargetType="xctk:SplitButton" BasedOn="{StaticResource {x:Type xctk:SplitButton}}">
                <Setter Property="Margin" Value="5"/>
            </Style>
            <Style TargetType="PasswordBox" BasedOn="{StaticResource {x:Type PasswordBox}}">
                <Setter Property="Margin" Value="5"/>
            </Style>
        </Style.Resources>
        <Setter Property="MinWidth" Value="40"/>
        <Setter Property="MinHeight" Value="10"/>
    </Style>
    <Style x:Key="HBotonera" BasedOn="{StaticResource BotoneraBase}" TargetType="Panel">
        <Setter Property="Margin" Value="-5,5"/>
    </Style>
    <Style x:Key="VBotonera" BasedOn="{StaticResource BotoneraBase}" TargetType="Panel">
        <Setter Property="Margin" Value="5,-5"/>
    </Style>
    <Style x:Key="Botonera" BasedOn="{StaticResource BotoneraBase}" TargetType="Panel">
        <Setter Property="Margin" Value="-5"/>
    </Style>
    <Style x:Key="TBotonera" BasedOn="{StaticResource BotoneraBase}" TargetType="Panel">
        <Setter Property="Margin" Value="5"/>
    </Style>
    <Style x:Key="RBotonera" BasedOn="{StaticResource BotoneraBase}" TargetType="Panel">
        <Setter Property="Margin" Value="5,-5,-5,-5"/>
    </Style>
    <Style x:Key="LBotonera" BasedOn="{StaticResource BotoneraBase}" TargetType="Panel">
        <Setter Property="Margin" Value="-5,-5,5,-5"/>
    </Style>

    <!-- Estilos especiales -->
    <Style x:Key="Boxy" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="Margin" Value="5" />
    </Style>
    <Style x:Key="VertSep" TargetType="{x:Type Separator}">
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <RotateTransform Angle="90"/>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Title" BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="24" />
        <Setter Property="FontFamily" Value="Champagne &amp; Limousines" />
    </Style>
    <Style x:Key="SmallTitle" BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="16" />
        <Setter Property="FontFamily" Value="Champagne &amp; Limousines" />
    </Style>
    <Style x:Key="ListedUpDown" TargetType="{x:Type xcwtp:InputBase}" BasedOn="{StaticResource UpDownBase}">
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <!-- Plantillas de Items de lista -->
    <DataTemplate x:Key="ToggleINameable" DataType="types:INameable">
        <TextBlock Text="{Binding Name}" />
    </DataTemplate>
</ResourceDictionary>